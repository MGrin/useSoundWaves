{"version":3,"sources":["../../src/index.tsx","App.tsx","index.tsx"],"names":["audioCtx","window","useState","isPlaying","setIsPlaying","error","setError","currentSound","setCurrentSound","useEffect","Error","oscillatorRef","useRef","stop","useCallback","play","params","oscillator","Buttons","onClick","App","randomFreq","setRandomFreq","player1","useSoundWaves","player2","player3","playFrequency1","freq","frequency","Number","type","playFrequency2","playFrequency3","changeRandomFreq","e","target","value","className","JSON","stringify","disabled","style","width","min","max","onChange","ReactDOM","render","document","getElementById"],"mappings":"gMAgBMA,EAAWC,oBAAsB,IAAIA,OAA1BA,kBAAjB,E,EAEsB,WACpB,MAAkCC,oBAAlC,GAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA0BF,qBAAnBG,EAAP,KAAcC,EAAd,KACA,EAAwCJ,qBAAjCK,EAAP,KAAqBC,EAArB,KAEAC,qBAAU,WACR,GACEH,EAAS,IAAII,MAAbJ,oCAFJG,IAMA,IAAME,EAAgBC,mBAEhBC,EAAOC,uBAAY,WACvBV,MACAI,UACIG,EAAJ,UACEA,iBACAA,oBALJ,IASMI,EAAOD,uBACX,YACE,IAGA,GACED,IAGFF,UAAwBX,EAAxBW,mBACAA,eAA6BK,QAA7BL,OACAA,mCACEK,EADFL,UAEEX,EAFFW,aAIAA,kBAA8BX,EAA9BW,aAEAA,kBAEAP,MACAI,QAEF,CAACK,EAtBH,IAyBA,MAAO,CACLV,UADK,EAELI,aAFK,EAGLU,WAAYN,EAHP,QAILI,KAJK,EAKLF,KALK,EAMLR,UChEEa,EAAU,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,QACjB,OACE,oCACE,4BAAQA,QAAS,kBAAMA,EAAQ,MAA/B,MACA,4BAAQA,QAAS,kBAAMA,EAAQ,MAA/B,MACA,4BAAQA,QAAS,kBAAMA,EAAQ,MAA/B,MACA,4BAAQA,QAAS,kBAAMA,EAAQ,MAA/B,MACA,4BAAQA,QAAS,kBAAMA,EAAQ,MAA/B,MACA,4BAAQA,QAAS,kBAAMA,EAAQ,MAA/B,MACA,4BAAQA,QAAS,kBAAMA,EAAQ,MAA/B,QA8DSC,EA1DH,WACV,MAAoClB,mBAAS,IAA7C,mBAAOmB,EAAP,KAAmBC,EAAnB,KAEMC,EAAUC,IACVC,EAAUD,IACVE,EAAUF,IAEVG,EAAiBb,uBACrB,SAACc,GACCL,EAAQR,KAAK,CAAEc,UAAWC,OAAOF,GAAOG,KAAM,WAEhD,CAACR,IAEGS,EAAiBlB,uBACrB,SAACc,GACCH,EAAQV,KAAK,CAAEc,UAAWC,OAAOF,OAEnC,CAACH,IAEGQ,EAAiBnB,uBAAY,WACjCY,EAAQX,KAAK,CAAEc,UAAWC,OAAOT,OAChC,CAACK,EAASL,IAEPa,EAAmBpB,uBAAY,SAACqB,GACpCb,EAAca,EAAEC,OAAOC,SACtB,IAEH,OACE,yBAAKC,UAAU,OACb,6CACA,kBAAC,EAAD,CAASnB,QAASQ,IAClB,2BAAIY,KAAKC,UAAUjB,EAAQhB,eAC3B,4BAAQY,QAASI,EAAQV,KAAM4B,UAAWlB,EAAQpB,WAAlD,QAGA,6BACA,kBAAC,EAAD,CAASgB,QAASa,IAClB,2BAAIO,KAAKC,UAAUf,EAAQlB,eAC3B,4BAAQY,QAASM,EAAQZ,KAAM4B,UAAWhB,EAAQtB,WAAlD,QAGA,6BACA,2BACEuC,MAAO,CAAEC,MAAO,KAChBZ,KAAK,QACLa,IAAK,GACLC,IAAK,IACLR,MAAOhB,EACPyB,SAAUZ,IAEZ,8BAAOb,GACP,6BACA,4BAAQF,QAASO,EAAQvB,UAAYuB,EAAQb,KAAOoB,GACjDP,EAAQvB,UAAY,OAAS,UCnEtC4C,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.d77886be.chunk.js","sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react'\n\ntype SoundParams = {\n  frequency: number\n  type?: OscillatorType\n}\n\ntype UseSoundWavesResult = {\n  isPlaying: boolean\n  currentSound?: number\n  play: (params: SoundParams) => void\n  stop: () => void\n  oscillator?: OscillatorNode\n  error?: Error\n}\n\nconst audioCtx = window.AudioContext ? new window.AudioContext() : undefined\n\nconst useSoundWaves = () => {\n  const [isPlaying, setIsPlaying] = useState(false)\n  const [error, setError] = useState<Error>()\n  const [currentSound, setCurrentSound] = useState()\n\n  useEffect(() => {\n    if (!audioCtx) {\n      setError(new Error('No AudioContext is available.'))\n    }\n  }, [])\n\n  const oscillatorRef = useRef<OscillatorNode>()\n\n  const stop = useCallback(() => {\n    setIsPlaying(false)\n    setCurrentSound(undefined)\n    if (oscillatorRef.current) {\n      oscillatorRef.current.stop()\n      oscillatorRef.current = undefined\n    }\n  }, [])\n\n  const play = useCallback(\n    (params) => {\n      if (!audioCtx) {\n        return\n      }\n      if (isPlaying) {\n        stop()\n      }\n\n      oscillatorRef.current = audioCtx.createOscillator()\n      oscillatorRef.current.type = params.type || 'sine'\n      oscillatorRef.current.frequency.setValueAtTime(\n        params.frequency,\n        audioCtx.currentTime\n      )\n      oscillatorRef.current.connect(audioCtx.destination)\n\n      oscillatorRef.current.start()\n\n      setIsPlaying(true)\n      setCurrentSound(params)\n    },\n    [stop, isPlaying]\n  )\n\n  return {\n    isPlaying,\n    currentSound,\n    oscillator: oscillatorRef.current,\n    play,\n    stop,\n    error\n  } as UseSoundWavesResult\n}\n\nexport default useSoundWaves\n","import React, { useState, useCallback } from 'react'\n\nimport useSoundWaves from 'use-sound-waves'\n\ntype ButtonsProps = {\n  onClick: (freq: number) => void\n}\nconst Buttons = ({ onClick }: ButtonsProps) => {\n  return (\n    <>\n      <button onClick={() => onClick(30)}>30</button>\n      <button onClick={() => onClick(35)}>35</button>\n      <button onClick={() => onClick(40)}>40</button>\n      <button onClick={() => onClick(45)}>45</button>\n      <button onClick={() => onClick(50)}>50</button>\n      <button onClick={() => onClick(55)}>55</button>\n      <button onClick={() => onClick(60)}>60</button>\n    </>\n  )\n}\nconst App = () => {\n  const [randomFreq, setRandomFreq] = useState(20)\n\n  const player1 = useSoundWaves()\n  const player2 = useSoundWaves()\n  const player3 = useSoundWaves()\n\n  const playFrequency1 = useCallback(\n    (freq) => {\n      player1.play({ frequency: Number(freq), type: 'sine' })\n    },\n    [player1]\n  )\n  const playFrequency2 = useCallback(\n    (freq) => {\n      player2.play({ frequency: Number(freq) })\n    },\n    [player2]\n  )\n  const playFrequency3 = useCallback(() => {\n    player3.play({ frequency: Number(randomFreq) })\n  }, [player3, randomFreq])\n\n  const changeRandomFreq = useCallback((e) => {\n    setRandomFreq(e.target.value)\n  }, [])\n\n  return (\n    <div className='app'>\n      <h1>useSoundWaves</h1>\n      <Buttons onClick={playFrequency1} />\n      <p>{JSON.stringify(player1.currentSound)}</p>\n      <button onClick={player1.stop} disabled={!player1.isPlaying}>\n        Stop\n      </button>\n      <hr />\n      <Buttons onClick={playFrequency2} />\n      <p>{JSON.stringify(player2.currentSound)}</p>\n      <button onClick={player2.stop} disabled={!player2.isPlaying}>\n        Stop\n      </button>\n      <hr />\n      <input\n        style={{ width: 600 }}\n        type='range'\n        min={20}\n        max={20000}\n        value={randomFreq}\n        onChange={changeRandomFreq}\n      />\n      <span>{randomFreq}</span>\n      <br />\n      <button onClick={player3.isPlaying ? player3.stop : playFrequency3}>\n        {player3.isPlaying ? 'Stop' : 'Play'}\n      </button>\n    </div>\n  )\n}\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}