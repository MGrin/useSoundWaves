{"version":3,"file":"index.modern.js","sources":["../src/index.tsx"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react'\n\ntype SoundParams = {\n  frequency: number\n  type?: OscillatorType\n}\n\ntype UseSoundWavesResult = {\n  isPlaying: boolean\n  currentSound?: number\n  play: (params: SoundParams) => void\n  stop: () => void\n  oscillator?: OscillatorNode\n  error?: Error\n}\n\nconst audioCtx = window.AudioContext ? new window.AudioContext() : undefined\n\nconst useSoundWaves = () => {\n  const [isPlaying, setIsPlaying] = useState(false)\n  const [error, setError] = useState<Error>()\n  const [currentSound, setCurrentSound] = useState()\n\n  useEffect(() => {\n    if (!audioCtx) {\n      setError(new Error('No AudioContext is available.'))\n    }\n  }, [])\n\n  const oscillatorRef = useRef<OscillatorNode>()\n\n  const stop = useCallback(() => {\n    setIsPlaying(false)\n    setCurrentSound(undefined)\n    if (oscillatorRef.current) {\n      oscillatorRef.current.stop()\n      oscillatorRef.current = undefined\n    }\n  }, [])\n\n  const play = useCallback(\n    (params) => {\n      if (!audioCtx) {\n        return\n      }\n      if (isPlaying) {\n        stop()\n      }\n\n      oscillatorRef.current = audioCtx.createOscillator()\n      oscillatorRef.current.type = params.type || 'sine'\n      oscillatorRef.current.frequency.setValueAtTime(\n        params.frequency,\n        audioCtx.currentTime\n      )\n      oscillatorRef.current.connect(audioCtx.destination)\n\n      oscillatorRef.current.start()\n\n      setIsPlaying(true)\n      setCurrentSound(params)\n    },\n    [stop, isPlaying]\n  )\n\n  return {\n    isPlaying,\n    currentSound,\n    oscillator: oscillatorRef.current,\n    play,\n    stop,\n    error\n  } as UseSoundWavesResult\n}\n\nexport default useSoundWaves\n"],"names":["audioCtx","window","AudioContext","undefined","useSoundWaves","useState","isPlaying","setIsPlaying","error","setError","currentSound","setCurrentSound","useEffect","Error","oscillatorRef","useRef","stop","useCallback","current","play","params","createOscillator","type","frequency","setValueAtTime","currentTime","connect","destination","start","oscillator"],"mappings":";;AAgBA,IAAMA,QAAQ,GAAGC,MAAM,CAACC,YAAP,GAAsB,IAAID,MAAM,CAACC,YAAX,EAAtB,GAAkDC,SAAnE;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB;AACpB,kBAAkCC,QAAQ,CAAC,KAAD,CAA1C;AAAA,MAAOC,SAAP;AAAA,MAAkBC,YAAlB;;AACA,mBAA0BF,QAAQ,EAAlC;AAAA,MAAOG,KAAP;AAAA,MAAcC,QAAd;;AACA,mBAAwCJ,QAAQ,EAAhD;AAAA,MAAOK,YAAP;AAAA,MAAqBC,eAArB;;AAEAC,EAAAA,SAAS,CAAC;AACR,QAAI,CAACZ,QAAL,EAAe;AACbS,MAAAA,QAAQ,CAAC,IAAII,KAAJ,CAAU,+BAAV,CAAD,CAAR;AACD;AACF,GAJQ,EAIN,EAJM,CAAT;AAMA,MAAMC,aAAa,GAAGC,MAAM,EAA5B;AAEA,MAAMC,IAAI,GAAGC,WAAW,CAAC;AACvBV,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACAI,IAAAA,eAAe,CAACR,SAAD,CAAf;;AACA,QAAIW,aAAa,CAACI,OAAlB,EAA2B;AACzBJ,MAAAA,aAAa,CAACI,OAAd,CAAsBF,IAAtB;AACAF,MAAAA,aAAa,CAACI,OAAd,GAAwBf,SAAxB;AACD;AACF,GAPuB,EAOrB,EAPqB,CAAxB;AASA,MAAMgB,IAAI,GAAGF,WAAW,CACtB,UAACG,MAAD;AACE,QAAI,CAACpB,QAAL,EAAe;AACb;AACD;;AACD,QAAIM,SAAJ,EAAe;AACbU,MAAAA,IAAI;AACL;;AAEDF,IAAAA,aAAa,CAACI,OAAd,GAAwBlB,QAAQ,CAACqB,gBAAT,EAAxB;AACAP,IAAAA,aAAa,CAACI,OAAd,CAAsBI,IAAtB,GAA6BF,MAAM,CAACE,IAAP,IAAe,MAA5C;AACAR,IAAAA,aAAa,CAACI,OAAd,CAAsBK,SAAtB,CAAgCC,cAAhC,CACEJ,MAAM,CAACG,SADT,EAEEvB,QAAQ,CAACyB,WAFX;AAIAX,IAAAA,aAAa,CAACI,OAAd,CAAsBQ,OAAtB,CAA8B1B,QAAQ,CAAC2B,WAAvC;AAEAb,IAAAA,aAAa,CAACI,OAAd,CAAsBU,KAAtB;AAEArB,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAI,IAAAA,eAAe,CAACS,MAAD,CAAf;AACD,GArBqB,EAsBtB,CAACJ,IAAD,EAAOV,SAAP,CAtBsB,CAAxB;AAyBA,SAAO;AACLA,IAAAA,SAAS,EAATA,SADK;AAELI,IAAAA,YAAY,EAAZA,YAFK;AAGLmB,IAAAA,UAAU,EAAEf,aAAa,CAACI,OAHrB;AAILC,IAAAA,IAAI,EAAJA,IAJK;AAKLH,IAAAA,IAAI,EAAJA,IALK;AAMLR,IAAAA,KAAK,EAALA;AANK,GAAP;AAQD,CAvDD;;;;"}